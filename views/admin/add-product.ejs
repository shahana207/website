
<%- include('../partials/admin/header') %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Product</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
            color: #333;
            line-height: 1.6;
        }

        .form-container {
            max-width: 900px;
            margin: 50px auto;
            padding: 35px;
            background-color: #fff;
            border-radius: 12px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
        }

        .form-title {
            text-align: center;
            font-size: 28px;
            margin-bottom: 30px;
            color: #1a1a1a;
            font-weight: 600;
            position: relative;
            padding-bottom: 15px;
        }

        .form-title:after {
            content: "";
            position: absolute;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 80px;
            height: 3px;
            background: linear-gradient(90deg, #3498db, #2c3e50);
        }

        .form-section {
            margin-bottom: 40px;
            padding: 25px;
            background-color: #f9f9f9;
            border-radius: 10px;
            border-left: 4px solid #000507;
            transition: all 0.3s ease;
        }

        .form-section:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.05);
        }

        .section-title {
            font-size: 20px;
            color: #090d11;
            margin-bottom: 20px;
            font-weight: 600;
            display: flex;
            align-items: center;
        }

        .section-title::before {
            content: "\f0a4";
            font-family: "Font Awesome 5 Free";
            font-weight: 900;
            margin-right: 10px;
            color: #000609;
        }

        .form-row {
            display: flex;
            flex-wrap: wrap;
            gap: 25px;
            margin-bottom: 15px;
        }

        .form-group {
            flex: 1;
            min-width: 250px;
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            font-size: 15px;
            font-weight: 600;
            margin-bottom: 8px;
            color: #2c3e50;
            transition: color 0.3s ease;
        }

        .form-group:hover label {
            color: #01070c;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 12px 15px;
            font-size: 15px;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            outline: none;
            transition: all 0.3s ease;
            background-color: #fff;
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            border-color: #010e16;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
        }

        .form-group textarea {
            height: 120px;
            resize: vertical;
        }

        .error-message {
            font-size: 13px;
            margin-top: 6px;
            color: #e74c3c !important;
            font-weight: 500;
            transition: all 0.3s;
        }

        .image-upload {
            border: 2px dashed #010d15;
            border-radius: 12px;
            padding: 30px;
            text-align: center;
            background-color: rgba(52, 152, 219, 0.05);
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .image-upload:hover {
            border-color: #060e13;
            background-color: rgba(52, 152, 219, 0.1);
            transform: scale(1.01);
        }

        .image-upload i {
            font-size: 50px;
            color: #05131c;
            margin-bottom: 15px;
        }

        .upload-text {
            font-size: 18px;
            color: #2c3e50;
            margin-bottom: 8px;
            font-weight: 500;
        }

        .upload-hint {
            font-size: 14px;
            color: #7f8c8d;
        }

        .image-upload input[type="file"] {
            display: none;
        }

        .thumbnail-preview {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-top: 20px;
        }

        .thumbnail {
            position: relative;
            width: 120px;
            height: 120px;
            transition: all 0.3s ease;
        }

        .thumbnail:hover {
            transform: scale(1.05);
        }

        .thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 8px;
            border: 2px solid #ddd;
        }

        .thumbnail .remove-img {
            position: absolute;
            top: -8px;
            right: -8px;
            width: 24px;
            height: 24px;
            background-color: #e74c3c;
            color: #fff;
            border: 2px solid #fff;
            border-radius: 50%;
            font-size: 14px;
            line-height: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

        .thumbnail .remove-img:hover {
            background-color: #c0392b;
            transform: scale(1.1);
        }

        .thumbnail .crop-img {
            position: absolute;
            bottom: 5px;
            left: 50%;
            transform: translateX(-50%);
            padding: 5px 10px;
            font-size: 12px;
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 5px;
            cursor: pointer;
        }

        .thumbnail .crop-img:hover {
            background-color: #f0f0f0;
        }

        .crop-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            z-index: 1000;
            backdrop-filter: blur(5px);
        }

        .crop-container {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: white;
            padding: 25px;
            border-radius: 12px;
            max-width: 90%;
            max-height: 90%;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .crop-preview {
            max-width: 100%;
            max-height: 500px;
            border-radius: 8px;
            margin-bottom: 20px;
        }

        .crop-buttons {
            display: flex;
            gap: 15px;
        }

        .crop-buttons button {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 15px;
            font-weight: 600;
            transition: all 0.3s;
        }

        .crop-cancel {
            background-color: #e74c3c;
            color: white;
        }

        .crop-cancel:hover {
            background-color: #c0392b;
            transform: translateY(-2px);
        }

        .crop-apply {
            background-color: #2ecc71;
            color: white;
        }

        .crop-apply:hover {
            background-color: #27ae60;
            transform: translateY(-2px);
        }

        .confirm-crop-btn {
            margin-top: 15px;
            padding: 10px 20px;
            background-color: #2ecc71;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 15px;
            font-weight: 600;
            transition: all 0.3s;
        }

        .confirm-crop-btn:hover {
            background-color: #27ae60;
            transform: translateY(-2px);
        }

        .actions {
            display: flex;
            justify-content: flex-end;
            gap: 15px;
            margin-top: 30px;
        }

        .btn-outline {
            padding: 12px 25px;
            font-size: 15px;
            font-weight: 600;
            color: #040d13;
            background-color: transparent;
            border: 2px solid #020c13;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-outline:hover {
            background-color: rgba(52, 152, 219, 0.1);
            transform: translateY(-2px);
        }

        .btn-primary {
            padding: 12px 25px;
            font-size: 15px;
            font-weight: 600;
            color: #fff;
            background: linear-gradient(135deg, #050505, #2c3e50);
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 10px rgba(52, 152, 219, 0.3);
        }

        .btn-primary:hover {
            background: linear-gradient(135deg, #00060a, #1a252f);
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(52, 152, 219, 0.4);
        }

        .color-dropdown-container {
            position: relative;
            width: 100%;
        }

        .color-dropdown-btn {
            width: 100%;
            padding: 12px 15px;
            font-size: 15px;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            background-color: #fff;
            text-align: left;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.3s ease;
        }

        .color-dropdown-btn:focus {
            border-color: #010e16;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
        }

        .color-dropdown-menu {
            display: none;
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background-color: #fff;
            border: 1px solid #e0e0e0;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            max-height: 200px;
            overflow-y: auto;
            padding: 10px 0;
        }

        .color-dropdown-menu.show {
            display: block;
        }

        .color-option {
            padding: 8px 15px;
            cursor: pointer;
            display: flex;
            align-items: center;
            font-size: 15px;
        }

        .color-option:hover {
            background-color: #f0f0f0;
        }

        .color-option input[type="checkbox"] {
            margin-right: 10px;
        }

        @media (max-width: 768px) {
            .form-container {
                margin: 20px;
                padding: 20px;
            }

            .form-section {
                padding: 15px;
            }

            .form-row {
                flex-direction: column;
                gap: 10px;
            }

            .form-group {
                min-width: 100%;
            }

            .actions {
                flex-direction: column;
                gap: 10px;
            }

            .btn-outline,
            .btn-primary {
                width: 100%;
            }
        }

        ::placeholder {
            color: #bdc3c7;
            opacity: 1;
        }

        select {
            appearance: none;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%233498db' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 10px center;
            background-size: 15px;
            padding-right: 30px !important;
        }
    </style>
</head>
<body>
    <div class="form-container">
        <h2 class="form-title">Add New Product</h2>
        
        <% if (error) { %>
            <div style="color: #e74c3c; margin-bottom: 20px; padding: 10px; background-color: #fadbd8; border-radius: 8px; border-left: 4px solid #e74c3c;"><%= error %></div>
        <% } %>

        <form id="add-product-form" method="post" action="/admin/addProducts" enctype="multipart/form-data">
            <!-- Basic Information -->
            <div class="form-section">
                <h3 class="section-title">Basic Information</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label for="product-name">Product Name*</label>
                        <input type="text" id="product-name" name="productName" placeholder="Enter product name" >
                        <span id="productName-error" class="error-message" style="display: none;"></span>
                    </div>
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label for="category">Category*</label>
                        <select id="category" name="category" >
                            <option value="" disabled selected>Select</option>
                            <% for(let i=0; i<cat.length; i++) { %>
                                <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
                            <% } %>
                        </select>
                        <span id="category-error" class="error-message" style="display: none;"></span>
                    </div>
                    <div class="form-group">
                        <label for="brand">Brand</label>
                        <select id="brand" name="brand">
                            <option value="" disabled selected>Select</option>
                            <% for(let i=0; i<brands.length; i++) { %>
                                <option value="<%= brands[i].name %>"><%= brands[i].name %></option>
                            <% } %>
                        </select>
                        <span id="brand-error" class="error-message" style="display: none;"></span>
                    </div>
                    <div class="form-group">
                        <label for="color">Colors</label>
                        <div class="color-dropdown-container">
                            <button type="button" class="color-dropdown-btn" id="colorDropdownBtn">Select Colors ▼</button>
                            <div class="color-dropdown-menu" id="colorDropdownMenu">
                                <!-- Colors will be populated by JavaScript -->
                            </div>
                            <input type="hidden" id="color" name="color" value="">
                        </div>
                        <span id="color-error" class="error-message" style="display: none;"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label for="sizes">Sizes</label>
                    <input type="text" id="sizes" name="sizes" placeholder="Enter sizes (comma-separated, e.g., S,M,L)" />
                    <span id="sizes-error" class="error-message" style="display: none;"></span>
                </div>
                
                <div class="form-group">
                    <label for="description">Product Description*</label>
                    <textarea id="descriptionid" name="description" placeholder="Describe the product detail" ></textarea>
                    <span id="description-error" class="error-message" style="display: none;"></span>
                </div>
            </div>
            
            <!-- Pricing Information -->
            <div class="form-section">
                <h3 class="section-title">Pricing Information</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label for="regular-price">Regular Price ($)*</label>
                        <input type="number" id="regular-price" name="regularPrice" min="0" step="0.01" placeholder="0.00" >
                        <span id="regularPrice-error" class="error-message" style="display: none;"></span>
                    </div>
                    <div class="form-group">
                        <label for="sale-price">Sale Price ($)*</label>
                        <input type="number" id="sale-price" name="salePrice" min="0" step="0.01" placeholder="0.00" >
                        <span id="salePrice-error" class="error-message" style="display: none;"></span>
                    </div>
                </div>
            </div>
            
            <!-- Inventory -->
            <div class="form-section">
                <h3 class="section-title">Inventory</h3>
                <div class="form-row">
                    <div class="form-group">
                        <label for="stock">Stock Quantity*</label>
                        <input type="number" id="stock" name="quantity" min="0" placeholder="0" >
                        <span id="quantity-error" class="error-message" style="display: none;"></span>
                    </div>
                </div>
            </div>
            
            <!-- Images -->
            <div class="form-section">
                <h3 class="section-title">Product Images</h3>
                <div class="image-upload">
                    <i class="fas fa-cloud-upload-alt"></i>
                    <p class="upload-text">Drag and drop or click to upload images</p>
                    <p class="upload-hint">JPEG, PNG formats, up to 5MB, max 4 images</p>
                    <input type="file" id="input1" name="productImages" multiple accept="image/jpeg,image/jpg,image/png,image/webp" >
                </div>
                <span id="images-error" class="error-message" style="display: none;"></span>
                <div class="thumbnail-preview" id="thumbnail-preview"></div>
                <div id="cropModal" class="crop-modal">
                    <div class="crop-container">
                        <img id="cropImage" class="crop-preview" alt="Crop Preview" />
                        <div class="crop-buttons">
                            <button class="crop-cancel" onclick="cancelCrop()">Cancel</button>
                            <button class="crop-apply" onclick="applyCrop()">Apply</button>
                        </div>
                    </div>
                </div>
                <button type="button" id="confirmCropBtn" class="confirm-crop-btn" style="display: none;">Confirm Crop</button>
            </div>
            
            <div class="actions">
                <button type="button" class="btn-outline" onclick="window.location.href='/admin/products'">Cancel</button>
                <button type="submit" class="btn-primary">Save Product</button>
            </div>
        </form>
    </div>

    <script>
        let cropper;
        let currentFile;
        let currentIndex = 0;
        let croppedImages = [];
        let selectedFiles = [];

        document.addEventListener('DOMContentLoaded', () => {
            const input = document.getElementById('input1');
            const imageUploadDiv = document.querySelector('.image-upload');
            const previewContainer = document.getElementById('thumbnail-preview');
            const errorSpan = document.getElementById('images-error');
            const confirmCropBtn = document.getElementById('confirmCropBtn');

            // Color dropdown functionality
            const colorDropdownBtn = document.getElementById('colorDropdownBtn');
            const colorDropdownMenu = document.getElementById('colorDropdownMenu');
            const colorHiddenInput = document.getElementById('color');
            const availableColors = [
                'Red', 'Blue', 'Green', 'Black', 'White', 'Yellow', 'Silver', 'Gray'
            ];

            // Populate color options
            availableColors.forEach(color => {
                const optionDiv = document.createElement('div');
                optionDiv.className = 'color-option';
                optionDiv.innerHTML = `
                    <input type="checkbox" value="${color}" id="color-${color}">
                    <label for="color-${color}">${color}</label>
                `;
                colorDropdownMenu.appendChild(optionDiv);
            });

            // Toggle dropdown
            colorDropdownBtn.addEventListener('click', () => {
                colorDropdownMenu.classList.toggle('show');
            });

            // Close dropdown when clicking outside
            document.addEventListener('click', (e) => {
                if (!colorDropdownBtn.contains(e.target) && !colorDropdownMenu.contains(e.target)) {
                    colorDropdownMenu.classList.remove('show');
                }
            });

            // Update selected colors
            const updateSelectedColors = () => {
                const checkboxes = colorDropdownMenu.querySelectorAll('input[type="checkbox"]:checked');
                const selectedColors = Array.from(checkboxes).map(cb => cb.value);
                colorHiddenInput.value = selectedColors.join(',');
                colorDropdownBtn.textContent = selectedColors.length > 0 
                    ? `${selectedColors.length} colors ▼`
                    : 'Select Colors ▼';
            };

            // Handle color selection
            colorDropdownMenu.addEventListener('change', (e) => {
                if (e.target.type === 'checkbox') {
                    updateSelectedColors();
                }
            });

            imageUploadDiv.addEventListener('click', () => input.click());

            input.addEventListener('change', function() {
                
                selectedFiles = Array.from(this.files);
                
                if (selectedFiles.length > 4) {
                    errorSpan.textContent = 'Maximum 4 images allowed';
                    errorSpan.style.display = 'block';
                    return;
                }
                errorSpan.style.display = 'none';
                currentIndex = 0;
                if (selectedFiles.length > 0) {
                    openCropper(selectedFiles[currentIndex]);
                }
            });

            function openCropper(file) {
                currentFile = file;
                const reader = new FileReader();
                reader.onload = function(e) {
                    const modal = document.getElementById('cropModal');
                    const image = document.getElementById('cropImage');
                    image.src = e.target.result;
                    modal.style.display = 'block';
                    
                    if (cropper) {
                        cropper.destroy();
                    }
                    
                    cropper = new Cropper(image, {
                        aspectRatio: 1,
                        viewMode: 1,
                        autoCropArea: 1,
                        responsive: true,
                        restore: false,
                        modal: true,
                        guides: true,
                        highlight: true,
                        cropBoxMovable: true,
                        cropBoxResizable: true,
                        toggleDragModeOnDblclick: false,
                    });
                };
                reader.readAsDataURL(file);
            }

            window.cancelCrop = function() {
                const modal = document.getElementById('cropModal');
                modal.style.display = 'none';
                if (cropper) {
                    cropper.destroy();
                }
                input.value = '';
                selectedFiles = [];
                croppedImages = [];
                renderThumbnails();
            };

            window.applyCrop = function() {
                if (cropper) {
                    const canvas = cropper.getCroppedCanvas({
                        width: 440,
                        height: 440
                    });
                    canvas.toBlob((blob) => {
                        const croppedFile = new File([blob], currentFile.name, {
                            type: 'image/jpeg',
                            lastModified: Date.now()
                        });
                        croppedImages[currentIndex] = croppedFile;
                        const modal = document.getElementById('cropModal');
                        modal.style.display = 'none';
                        cropper.destroy();
                        renderThumbnails();
                        if (currentIndex < selectedFiles.length - 1) {
                            currentIndex++;
                            openCropper(selectedFiles[currentIndex]);
                        } else {
                            document.getElementById('confirmCropBtn').style.display = 'block';
                        }
                    }, 'image/jpeg', 0.9);
                }
            };

            window.confirmCrop = function() {
                updateFileInput();
                document.getElementById('confirmCropBtn').style.display = 'none';
                currentIndex = 0;
                selectedFiles = [];
            };

            function renderThumbnails() {
                const previewContainer = document.getElementById('thumbnail-preview');
                previewContainer.innerHTML = '';
                selectedFiles.forEach((file, index) => {
                    const thumbnail = document.createElement('div');
                    thumbnail.className = 'thumbnail';
                    const img = document.createElement('img');
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        img.src = e.target.result;
                        thumbnail.appendChild(img);
                        const removeBtn = document.createElement('button');
                        removeBtn.className = 'remove-img';
                        removeBtn.innerHTML = '×';
                        removeBtn.addEventListener('click', () => {
                            selectedFiles.splice(index, 1);
                            croppedImages.splice(index, 1);
                            updateFileInput();
                            renderThumbnails();
                        });
                        thumbnail.appendChild(removeBtn);
                        if (croppedImages[index]) {
                            const cropBtn = document.createElement('button');
                            cropBtn.className = 'crop-img';
                            cropBtn.textContent = 'Crop Image';
                            cropBtn.onclick = () => {
                                currentIndex = index;
                                openCropper(selectedFiles[index]);
                            };
                            thumbnail.appendChild(cropBtn);
                        }
                        previewContainer.appendChild(thumbnail);
                    };
                    reader.readAsDataURL(croppedImages[index] || file);
                });
            }

            function updateFileInput() {
                const dataTransfer = new DataTransfer();
                croppedImages.forEach(file => dataTransfer.items.add(file));
                input.files = dataTransfer.files;
            }

            document.getElementById('add-product-form').addEventListener('submit', function(e) {
                if (!validateForm()) {
                    e.preventDefault();
                }
            });

            function validateForm() {
    clearErrorMessages();
    const name = document.getElementById('product-name').value;
    const description = document.getElementById('descriptionid').value;
    const price = document.getElementById('regular-price').value;
    const salePrice = document.getElementById('sale-price').value;
    const category = document.getElementById('category').value;
    const brand = document.getElementById('brand').value;
    const colors = document.getElementById('color').value;
    const sizes = document.getElementById('sizes').value; // Add sizes
    const quantity = document.getElementById('stock').value;
    let isValid = true;

    if (name.trim() === "") {
        displayErrorMessage('productName-error', 'Please enter a product name');
        isValid = false;
    } else if (!/^[a-zA-Z0-9\s,()\-.]+$/.test(name.trim())) {
        displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters, numbers, spaces, commas, parentheses, hyphens, and periods');
        isValid = false;
    }
    if (description.trim() === "") {
        displayErrorMessage('description-error', 'Please enter a product description');
        isValid = false;
    } else if (!/^[a-zA-Z0-9\s,()\-.]+$/.test(description.trim())) {
        displayErrorMessage('description-error', 'Product description should contain only alphabetic characters, numbers, spaces, commas, parentheses, hyphens, and periods');
        isValid = false;
    }
    if (!category) {
        displayErrorMessage('category-error', 'Please select a category');
        isValid = false;
    }
    if (sizes.trim() && !/^[a-zA-Z0-9\s,]+$/.test(sizes.trim())) {
        displayErrorMessage('sizes-error', 'Sizes should contain only alphabetic characters, numbers, spaces, and commas');
        isValid = false;
    }
    if (!/^\d+(\.\d{1,2})?$/.test(price) || parseFloat(price) <= 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid positive price');
        isValid = false;
    }
    if (!/^\d+(\.\d{1,2})?$/.test(salePrice) || parseFloat(salePrice) <= 0) {
        displayErrorMessage('salePrice-error', 'Please enter a valid positive sale price');
        isValid = false;
    }
    if (parseFloat(salePrice) >= parseFloat(price)) {
        displayErrorMessage('salePrice-error', 'Sale price must be less than regular price');
        isValid = false;
    }
    if (!quantity || parseInt(quantity) < 0) {
        displayErrorMessage('quantity-error', 'Please enter a valid non-negative quantity');
        isValid = false;
    }
    if (selectedFiles.length === 0) {
        displayErrorMessage('images-error', 'Please select at least one image');
        isValid = false;
    } else if (croppedImages.length < selectedFiles.length) {
        displayErrorMessage('images-error', 'Please crop all images before submitting');
        isValid = false;
    }

    return isValid;
}

            function displayErrorMessage(elementId, message) {
                const errorElement = document.getElementById(elementId);
                errorElement.textContent = message;
                errorElement.style.display = 'block';
            }

            function clearErrorMessages() {
                const errorElements = document.getElementsByClassName('error-message');
                Array.from(errorElements).forEach(element => {
                    element.textContent = '';
                    element.style.display = 'none';
                });
            }
        });
    </script>
</body>
</html>
