<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Fazion Order Details">
    <title>Order Details - <%= order.orderId %></title>

    <!-- External CSS dependencies -->
    <link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@300;400;600;700;800;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/bootstrap.min.css" type="text/css">
    <link rel="stylesheet" href="/css/font-awesome.min.css" type="text/css">
    <link rel="stylesheet" href="/css/elegant-icons.css" type="text/css">
    <link rel="stylesheet" href="/css/magnific-popup.css" type="text/css">
    <link rel="stylesheet" href="/css/nice-select.css" type="text/css">
    <link rel="stylesheet" href="/css/owl.carousel.min.css" type="text/css">
    <link rel="stylesheet" href="/css/slicknav.min.css" type="text/css">
    <link rel="stylesheet" href="/css/style.css" type="text/css">
    <!-- Font Awesome for wishlist icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <!-- SweetAlert2 CDN -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        /* Existing styles unchanged */
        .order-details-page { /* ... */ }
        .profile   { /* ... */ }
        .profile-container { /* ... */ }
        .content { /* ... */ }
        /* ... other existing styles ... */

        /* Wishlist button styles (same as shop.ejs) */
        .wishlist-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 20px;
            cursor: pointer;
            transition: color 0.3s ease;
        }

        .wishlist-btn i {
            color: #ccc;
        }

        .wishlist-btn.active i {
            color: #e74c3c;
        }

        /* Adjust item-card to position wishlist button */
        .item-card {
            position: relative; /* Ensure relative positioning for absolute wishlist button */
        }
    </style>
</head>
<body class="order-details-page">
    <%- include("../partials/user/header") %>
    
    <div class="profile-container">
        <%- include("../partials/user/sidebar", { active: 'orders' }) %>
        
        <div class="content">
            <a href="/order" class="back-button">
                <i class="fa fa-arrow-left"></i> Back to Orders
            </a>
            
            <div class="order-details-header">
                <h1>Order #<%= order.orderId %></h1>
            </div>
            
            <div class="order-details-content">
                <div class="order-status">
                    <div class="status-badge status-<%= order.status.toLowerCase().replace(' ', '-') %>">
                        <%= order.status %>
                    </div>
                    <div class="order-date">
                        Order Date: <%= order.createdOn ? new Date(order.createdOn).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) : 'N/A' %>
                    </div>
                </div>
                
                <div class="shipping-info">
                    <h2 class="section-title">
                        <i class="fa fa-map-marker"></i> Shipping Address
                    </h2>
                    <div class="shipping-address">
                        <div class="address-name"><%= order.address?.name || 'N/A' %></div>
                        <div class="address-details">
                            <%= order.address?.addressType || '' %><br>
                            <%= order.address?.addressLine || '' %> <%= order.address?.landMark || '' %><br>
                            <%= order.address?.city || '' %>, <%= order.address?.state || '' %> <%= order.address?.pincode || '' %><br>
                            Phone: <%= order.address?.phone || 'N/A' %> <%= order.address?.altPhone ? ', Alt: ' + order.address.altPhone : '' %>
                        </div>
                    </div>
                </div>
                
                <div class="order-items">
                    <h2 class="section-title">
                        <i class="fa fa-shopping-bag"></i> Ordered Items
                    </h2>
                    
                    <% order.orderedItems.forEach(item => { %>
                        <div class="item-card">
                            <!-- Wishlist button -->
                            <span class="wishlist-btn" onclick="addToWishlist('<%= item.product?._id %>')">
                                <i class="far fa-heart"></i>
                            </span>
                            <div class="item-image">
                                <img src="/Uploads/product-images/<%= item.product?.productImage?.[0] || '/images/placeholder.jpg' %>" alt="<%= item.product?.productName || 'Product' %>">
                            </div>
                            <div class="item-details">
                                <div class="item-name"><%= item.product?.productName || 'Unknown Product' %></div>
                                <div class="item-price">₹<%= item.price.toFixed(2) %> x Qty: <%= item.quantity %></div>
                                <div class="item-status">
                                    Return Status: <%= item.returnStatus %>
                                    <% if (item.returnStatus === 'Return Requested' || item.returnStatus === 'Returned') { %>
                                        <br>Reason: <%= item.returnReason || 'Not specified' %>
                                    <% } %>
                                    <% if (item.returnStatus === 'Cancelled') { %>
                                        <br>Reason: <%= item.returnReason || 'Not specified' %>
                                    <% } %>
                                </div>
                            </div>
                            <div class="item-actions">
                                <% if (order.status !== 'Delivered' && order.status !== 'Cancelled' && order.status !== 'Returned' && item.returnStatus === 'Not Returned') { %>
                                    <button class="action-btn btn-cancel" onclick="cancelItem('<%= order.orderId %>', '<%= item._id %>')">Cancel Item</button>
                                <% } else { %>
                                    <button class="action-btn btn-cancel btn-disabled" disabled>Cancel Item</button>
                                <% } %>
                                <% if (order.status === 'Delivered' && item.returnStatus === 'Not Returned') { %>
                                    <button class="action-btn btn-return" onclick="returnItem('<%= order.orderId %>', '<%= item._id %>')">Return Item</button>
                                <% } else if (item.returnStatus === 'Return Requested' || item.returnStatus === 'Returned') { %>
                                    <button class="action-btn btn-return btn-disabled" disabled>Return <%= item.returnStatus %></button>
                                <% } else { %>
                                    <button class="action-btn btn-return btn-disabled" disabled>Return Item</button>
                                <% } %>
                            </div>
                        </div>
                    <% }) %>
                </div>
                
                <div class="order-summary">
                    <h2 class="section-title">
                        <i class="fa fa-file-text-o"></i> Order Summary
                    </h2>
                    <div class="summary-row">
                        <div>Subtotal</div>
                        <div>₹<%= order.orderedItems.reduce((total, item) => total + item.price * item.quantity, 0).toFixed(2) %></div>
                    </div>
                    <div class="summary-row">
                        <div>Discount</div>
                        <div>₹<%= order.discount?.toFixed(2) || '0.00' %></div>
                    </div>
                    <div class="summary-row">
                        <div>Shipping</div>
                        <div>₹0.00</div>
                    </div>
                    <div class="summary-row total">
                        <div>Grand Total</div>
                        <div>₹<%= order.finalAmount.toFixed(2) %></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <%- include("../partials/user/footer") %>
    
    <!-- External JS dependencies -->
    <script src="/js/jquery-3.3.1.min.js"></script>
    <script src="/js/bootstrap.min.js"></script>
    <script src="/js/jquery.nice-select.min.js"></script>
    <script src="/js/jquery.nicescroll.min.js"></script>
    <script src="/js/jquery.magnific-popup.min.js"></script>
    <script src="/js/jquery.countdown.min.js"></script>
    <script src="/js/jquery.slicknav.js"></script>
    <script src="/js/mixitup.min.js"></script>
    <script src="/js/owl.carousel.min.js"></script>
    <script src="/js/main.js"></script>
    
    <script>
        // Existing cancelItem function (unchanged)
        async function cancelItem(orderId, itemId) {
            const { value: reason } = await Swal.fire({
                title: 'Cancel Item',
                input: 'textarea',
                inputLabel: 'Please provide a reason for cancelling this item:',
                inputPlaceholder: 'Enter your reason here...',
                showCancelButton: true,
                confirmButtonText: 'Submit',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#e53e3e',
                cancelButtonColor: '#718096',
                inputValidator: (value) => {
                    if (!value) {
                        return 'You must provide a reason!';
                    }
                }
            });

            if (reason) {
                try {
                    const response = await fetch('/cancel-item', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ orderId, itemId, reason }),
                    });
                    const result = await response.json();
                    if (result.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: result.message,
                            confirmButtonText: 'OK',
                            confirmButtonColor: '#2ecc71',
                            timer: 3000,
                            timerProgressBar: true
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: result.message,
                            confirmButtonText: 'OK',
                            confirmButtonColor: '#e53e3e'
                        });
                    }
                } catch (error) {
                    console.error('Error canceling item:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to cancel item. Please try again.',
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#e53e3e'
                    });
                }
            }
        }

        // Existing returnItem function (unchanged)
        async function returnItem(orderId, itemId) {
            const { value: reason } = await Swal.fire({
                title: 'Return Item',
                input: 'textarea',
                inputLabel: 'Please provide a reason for returning this item:',
                inputPlaceholder: 'Enter your reason here...',
                showCancelButton: true,
                confirmButtonText: 'Submit',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#ed8936',
                cancelButtonColor: '#718096',
                inputValidator: (value) => {
                    if (!value) {
                        return 'You must provide a reason!';
                    }
                }
            });

            if (reason) {
                try {
                    const response = await fetch('/return-item', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ orderId, itemId, reason }),
                    });
                    const result = await response.json();
                    if (result.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: result.message,
                            confirmButtonText: 'OK',
                            confirmButtonColor: '#2ecc71',
                            timer: 3000,
                            timerProgressBar: true
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: result.message,
                            confirmButtonText: 'OK',
                            confirmButtonColor: '#e53e3e'
                        });
                    }
                } catch (error) {
                    console.error('Error returning item:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to return item. Please try again.',
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#e53e3e'
                    });
                }
            }
        }

        // Wishlist functionality (same as shop.ejs)
        function addToWishlist(productId) {
            $.ajax({
                url: '/addToWishlist',
                method: 'POST',
                data: { id: productId },
                success: function(response) {
                    if (response.status) {
                        const wishlistBtn = document.querySelector(`.wishlist-btn[onclick="addToWishlist('${productId}')"]`);
                        if (response.message.includes('removed')) {
                            wishlistBtn.classList.remove('active');
                            wishlistBtn.innerHTML = '<i class="far fa-heart"></i>';
                        } else {
                            wishlistBtn.classList.add('active');
                            wishlistBtn.innerHTML = '<i class="fas fa-heart"></i>';
                        }

                        Swal.fire({
                            icon: 'success',
                            title: response.message.includes('added') ? 'Added to Wishlist!' : 'Removed from Wishlist!',
                            text: response.message,
                            showConfirmButton: false,
                            timer: 1500
                        });
                    } else if (response.redirect) {
                        Swal.fire({
                            icon: 'warning',
                            title: 'Authentication Required',
                            text: response.message,
                            timer: 1500,
                            showConfirmButton: false
                        }).then(() => {
                            window.location.href = response.redirect;
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Failed to Update Wishlist',
                            text: response.message,
                            showConfirmButton: true
                        });
                    }
                },
                error: function(err) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'An error occurred while updating wishlist',
                        showConfirmButton: true
                    });
                }
            });
        }

        // Initialize wishlist buttons
        document.addEventListener('DOMContentLoaded', function() {
            $.ajax({
                url: '/getWishlist',
                method: 'GET',
                success: function(response) {
                    if (response.success && response.wishlist) {
                        response.wishlist.forEach(productId => {
                            const wishlistBtn = document.querySelector(`.wishlist-btn[onclick="addToWishlist('${productId}')"]`);
                            if (wishlistBtn) {
                                wishlistBtn.classList.add('active');
                                wishlistBtn.innerHTML = '<i class="fas fa-heart"></i>';
                            }
                        });
                    }
                },
                error: function(err) {
                    console.error('Error fetching wishlist:', err);
                }
            });
        });
    </script>
</body>
</html>